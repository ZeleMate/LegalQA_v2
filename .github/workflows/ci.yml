name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: read-all

on:
  push:
    branches: ['**']  # All branches
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    # Skip if [skip ci] in commit message
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            poetry.lock
            requirements*.txt
      - name: Install dependencies
        run: pip install .[dev]
      - name: Black (check)
        run: black --check src/ tests/
      - name: isort (check)
        run: isort --check-only src/ tests/
      - name: Flake8
        run: flake8 src/ tests/
      - name: Mypy
        run: mypy src/
      - name: Bandit
        run: bandit -r src/

  test:
    name: Pytest & Coverage
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 30
    # Skip if [skip ci] in commit message
    if: ${{ github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            poetry.lock
            requirements*.txt
      - name: Install dependencies
        run: pip install .[dev]
      - name: Run tests
        run: |
          pytest --maxfail=1 --disable-warnings --tb=short \
                 --cov=src --cov-report=xml --cov-fail-under=25
      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  # Heavy jobs - only on PR or main/develop branches
  docker-build:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 45
    # Only run on PR or main/develop branches
    if: ${{ (github.event_name == 'pull_request' || 
             github.ref == 'refs/heads/main' || 
             github.ref == 'refs/heads/develop') &&
           (github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]')) }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
      - name: Build (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.minimal
          tags: legalqa:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          push: false
        # Fallback: if cache fails, retry without cache
        continue-on-error: true
      
      - name: Build (no cache fallback)
        if: failure()
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.minimal
          tags: legalqa:ci
          load: true
          platforms: linux/amd64
          push: false
          # Disable cache completely for fallback
          no-cache: true
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  # Only run merge-check on pull requests
  merge-check:
    if: ${{ github.event_name == 'pull_request' &&
           (github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]')) }}
    name: Prevent Merge Collisions
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for merge conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          git merge --no-commit --no-ff origin/${{ github.base_ref }} || (echo 'Merge conflict detected!' && exit 1)

  # Performance test - only on PR or main/develop, and only if staging URL is available
  k6-smoke:
    runs-on: ubuntu-latest
    name: k6 Smoke Performance Test
    timeout-minutes: 10
    # Only run on PR or main/develop branches, and only if staging URL is configured
    if: ${{ (github.event_name == 'pull_request' || 
             github.ref == 'refs/heads/main' || 
             github.ref == 'refs/heads/develop') &&
           (github.event_name != 'push' || !contains(github.event.head_commit.message, '[skip ci]')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup k6
        uses: grafana/setup-k6-action@v1
        
      - name: Load environment variables
        run: |
          if [ -f .env ]; then
            echo "Loading .env file..."
            export $(cat .env | grep -v '^#' | xargs)
            echo "APP_URL_STAGING from .env: $APP_URL_STAGING"
          else
            echo "No .env file found"
          fi
          
      - name: Check staging URL
        run: |
          # Use .env file if available, otherwise skip
          if [ -f .env ]; then
            export $(cat .env | grep -v '^#' | xargs)
            echo "APP_URL_STAGING from .env: $APP_URL_STAGING"
          fi
          
          if [ -z "$APP_URL_STAGING" ]; then
            echo "No staging URL configured, skipping performance test"
            exit 0
          fi
          echo "Staging URL configured: $APP_URL_STAGING"
          
      - name: Run k6 smoke test
        run: |
          # Use .env file if available
          if [ -f .env ]; then
            export $(cat .env | grep -v '^#' | xargs)
          fi
          
          if [ -z "$APP_URL_STAGING" ]; then
            echo "No staging URL configured, skipping performance test"
            exit 0
          fi
          
          echo "Running k6 smoke performance test..."
          echo "Target URL: $APP_URL_STAGING"
          
          # Run with noise-tolerant thresholds for smoke test
          # Use --no-usage-report to avoid potential issues
          k6 run \
            --vus 2 \
            --duration 15s \
            --summary-export k6-summary.json \
            --out json=k6-results.json \
            --no-usage-report \
            perf/smoke.js || {
            echo "k6 test failed, but continuing to upload any generated files"
            # Create empty files if they don't exist to avoid upload errors
            touch k6-summary.json k6-results.json
            exit 0
          }
          
          # Ensure files exist
          if [ ! -f k6-summary.json ]; then
            echo '{"metrics":{}}' > k6-summary.json
          fi
          if [ ! -f k6-results.json ]; then
            echo '[]' > k6-results.json
          fi
        env:
          BASE_URL: $APP_URL_STAGING
          
      - name: Upload k6 results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-smoke-results
          path: |
            k6-summary.json
            k6-results.json
          retention-days: 7
          if-no-files-found: warn
          
      - name: Debug k6 files
        if: always()
        run: |
          echo "=== Debug: Checking for k6 files ==="
          ls -la *.json 2>/dev/null || echo "No JSON files found in current directory"
          echo "Current directory contents:"
          ls -la
          
      - name: Display k6 summary
        if: always()
        run: |
          if [ -f k6-summary.json ]; then
            echo "=== k6 Smoke Test Summary ==="
            cat k6-summary.json | jq -r '.metrics | to_entries[] | "\(.key): \(.value.avg // .value.rate // .value.count)"' || echo "Could not parse k6 summary"
          else
            echo "k6 summary file not found"
          fi

  # Always run summary - collects results from all jobs
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "=== CI Summary ==="
          echo "Test job status: ${{ needs.test.result }}"
          echo "Docker build job status: ${{ needs.docker-build.result }}"
          
          # Check if merge-check job exists (only for PRs)
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Merge check job: Expected for PR"
          else
            echo "Merge check job: Skipped (not a PR)"
          fi
          
          # Determine overall status
          if [ "${{ needs.test.result }}" == "success" ] && \
             [ "${{ needs.docker-build.result }}" == "success" ]; then
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              echo "✅ All CI checks passed! (Including merge check for PR)"
            else
              echo "✅ Core CI checks passed! (Merge check skipped for non-PR)"
            fi
            exit 0
          else
            echo "❌ Some CI checks failed!"
            echo "Test: ${{ needs.test.result }}"
            echo "Docker Build: ${{ needs.docker-build.result }}"
            exit 1
          fi

  # Final summary that always runs and shows all job results
  final-summary:
    name: Final Summary
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build, merge-check, k6-smoke, summary]
    if: always()
    steps:
      - name: Display final summary
        run: |
          echo "=== FINAL CI SUMMARY ==="
          echo "Event type: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo ""
          echo "Job Results:"
          echo "  Lint & Format: ${{ needs.lint.result }}"
          echo "  Tests: ${{ needs.test.result }}"
          echo "  Docker Build: ${{ needs.docker-build.result }}"
          echo "  Merge Check: ${{ needs.merge-check.result }}"
          echo "  k6 Performance: ${{ needs.k6-smoke.result }}"
          echo "  Summary: ${{ needs.summary.result }}"
          echo ""
          
          # Count successful jobs
          success_count=0
          total_count=0
          
          if [ "${{ needs.lint.result }}" == "success" ]; then ((success_count++)); fi
          if [ "${{ needs.test.result }}" == "success" ]; then ((success_count++)); fi
          if [ "${{ needs.docker-build.result }}" == "success" ]; then ((success_count++)); fi
          if [ "${{ needs.merge-check.result }}" == "success" ] || [ "${{ needs.merge-check.result }}" == "skipped" ]; then ((success_count++)); fi
          if [ "${{ needs.k6-smoke.result }}" == "success" ] || [ "${{ needs.k6-smoke.result }}" == "skipped" ]; then ((success_count++)); fi
          if [ "${{ needs.summary.result }}" == "success" ]; then ((success_count++)); fi
          
          total_count=6
          
          echo "Success Rate: $success_count/$total_count jobs passed"
          
          if [ $success_count -eq $total_count ]; then
            echo "🎉 All jobs completed successfully!"
            exit 0
          else
            echo "⚠️  Some jobs failed or were skipped"
            exit 1
          fi 